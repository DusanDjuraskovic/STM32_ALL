
SPI_MASTER_10MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080022a4  080022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d4  080022d4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080022d4  080022d4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d4  080022d4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080022dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000020  080022fc  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080022fc  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054fd  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d8  00000000  00000000  00025545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  00026920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00026f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e747  00000000  00000000  00027438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007339  00000000  00000000  00035b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056eed  00000000  00000000  0003ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00093da5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001390  00000000  00000000  00093df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800228c 	.word	0x0800228c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	0800228c 	.word	0x0800228c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_SPI_TxRxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	counter++;
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <HAL_SPI_TxRxCpltCallback+0x1c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b02      	ldr	r3, [pc, #8]	; (800023c <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000232:	701a      	strb	r2, [r3, #0]
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000013a 	.word	0x2000013a

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fa00 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f818 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f8be 	bl	80003cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000250:	f000 f89e 	bl	8000390 <MX_DMA_Init>
  MX_SPI1_Init();
 8000254:	f000 f85e 	bl	8000314 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_SPI_TransmitReceive_DMA(&hspi1, buffer_tx, buffer_rx, 18);
 8000258:	4a05      	ldr	r2, [pc, #20]	; (8000270 <main+0x30>)
 800025a:	4906      	ldr	r1, [pc, #24]	; (8000274 <main+0x34>)
 800025c:	4806      	ldr	r0, [pc, #24]	; (8000278 <main+0x38>)
 800025e:	2312      	movs	r3, #18
 8000260:	f001 fb56 	bl	8001910 <HAL_SPI_TransmitReceive_DMA>
	  HAL_Delay(500);
 8000264:	23fa      	movs	r3, #250	; 0xfa
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fa51 	bl	8000710 <HAL_Delay>
	  HAL_SPI_TransmitReceive_DMA(&hspi1, buffer_tx, buffer_rx, 18);
 800026e:	e7f3      	b.n	8000258 <main+0x18>
 8000270:	20000128 	.word	0x20000128
 8000274:	20000000 	.word	0x20000000
 8000278:	2000003c 	.word	0x2000003c

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b091      	sub	sp, #68	; 0x44
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	2410      	movs	r4, #16
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2330      	movs	r3, #48	; 0x30
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f001 fff5 	bl	800227c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	003b      	movs	r3, r7
 8000294:	0018      	movs	r0, r3
 8000296:	2310      	movs	r3, #16
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f001 ffee 	bl	800227c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a0:	0021      	movs	r1, r4
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2201      	movs	r2, #1
 80002ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2210      	movs	r2, #16
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2202      	movs	r2, #2
 80002b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	0392      	lsls	r2, r2, #14
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fe27 	bl	8000f24 <HAL_RCC_OscConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002da:	f000 f88f 	bl	80003fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	003b      	movs	r3, r7
 80002e0:	2207      	movs	r2, #7
 80002e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	003b      	movs	r3, r7
 80002e6:	2202      	movs	r2, #2
 80002e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	003b      	movs	r3, r7
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	00d2      	lsls	r2, r2, #3
 80002f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f8:	003b      	movs	r3, r7
 80002fa:	2101      	movs	r1, #1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 f92b 	bl	8001558 <HAL_RCC_ClockConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000306:	f000 f879 	bl	80003fc <Error_Handler>
  }
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b011      	add	sp, #68	; 0x44
 8000310:	bd90      	pop	{r4, r7, pc}
	...

08000314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_SPI1_Init+0x74>)
 800031a:	4a1c      	ldr	r2, [pc, #112]	; (800038c <MX_SPI1_Init+0x78>)
 800031c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <MX_SPI1_Init+0x74>)
 8000320:	2282      	movs	r2, #130	; 0x82
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_SPI1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_SPI1_Init+0x74>)
 800032e:	22e0      	movs	r2, #224	; 0xe0
 8000330:	00d2      	lsls	r2, r2, #3
 8000332:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_SPI1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_SPI1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_SPI1_Init+0x74>)
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	0092      	lsls	r2, r2, #2
 8000346:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_SPI1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_SPI1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_SPI1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_SPI1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_SPI1_Init+0x74>)
 8000362:	2207      	movs	r2, #7
 8000364:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_SPI1_Init+0x74>)
 800036e:	2208      	movs	r2, #8
 8000370:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <MX_SPI1_Init+0x74>)
 8000374:	0018      	movs	r0, r3
 8000376:	f001 fa13 	bl	80017a0 <HAL_SPI_Init>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800037e:	f000 f83d 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	2000003c 	.word	0x2000003c
 800038c:	40013000 	.word	0x40013000

08000390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_DMA_Init+0x38>)
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_DMA_Init+0x38>)
 800039c:	2101      	movs	r1, #1
 800039e:	430a      	orrs	r2, r1
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_DMA_Init+0x38>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	2201      	movs	r2, #1
 80003a8:	4013      	ands	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	200a      	movs	r0, #10
 80003b4:	f000 fa7c 	bl	80008b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003b8:	200a      	movs	r0, #10
 80003ba:	f000 fa8e 	bl	80008da <HAL_NVIC_EnableIRQ>

}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	40021000 	.word	0x40021000

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_GPIO_Init+0x2c>)
 80003d4:	695a      	ldr	r2, [r3, #20]
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_GPIO_Init+0x2c>)
 80003d8:	2180      	movs	r1, #128	; 0x80
 80003da:	0289      	lsls	r1, r1, #10
 80003dc:	430a      	orrs	r2, r1
 80003de:	615a      	str	r2, [r3, #20]
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <MX_GPIO_Init+0x2c>)
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	029b      	lsls	r3, r3, #10
 80003e8:	4013      	ands	r3, r2
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000400:	b672      	cpsid	i
}
 8000402:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000404:	e7fe      	b.n	8000404 <Error_Handler+0x8>
	...

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x44>)
 8000410:	699a      	ldr	r2, [r3, #24]
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <HAL_MspInit+0x44>)
 8000414:	2101      	movs	r1, #1
 8000416:	430a      	orrs	r2, r1
 8000418:	619a      	str	r2, [r3, #24]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x44>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	2201      	movs	r2, #1
 8000420:	4013      	ands	r3, r2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <HAL_MspInit+0x44>)
 8000428:	69da      	ldr	r2, [r3, #28]
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <HAL_MspInit+0x44>)
 800042c:	2180      	movs	r1, #128	; 0x80
 800042e:	0549      	lsls	r1, r1, #21
 8000430:	430a      	orrs	r2, r1
 8000432:	61da      	str	r2, [r3, #28]
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <HAL_MspInit+0x44>)
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	055b      	lsls	r3, r3, #21
 800043c:	4013      	ands	r3, r2
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	40021000 	.word	0x40021000

08000450 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b08b      	sub	sp, #44	; 0x2c
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000458:	2414      	movs	r4, #20
 800045a:	193b      	adds	r3, r7, r4
 800045c:	0018      	movs	r0, r3
 800045e:	2314      	movs	r3, #20
 8000460:	001a      	movs	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	f001 ff0a 	bl	800227c <memset>
  if(hspi->Instance==SPI1)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a43      	ldr	r2, [pc, #268]	; (800057c <HAL_SPI_MspInit+0x12c>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d000      	beq.n	8000474 <HAL_SPI_MspInit+0x24>
 8000472:	e07e      	b.n	8000572 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000474:	4b42      	ldr	r3, [pc, #264]	; (8000580 <HAL_SPI_MspInit+0x130>)
 8000476:	699a      	ldr	r2, [r3, #24]
 8000478:	4b41      	ldr	r3, [pc, #260]	; (8000580 <HAL_SPI_MspInit+0x130>)
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	0149      	lsls	r1, r1, #5
 800047e:	430a      	orrs	r2, r1
 8000480:	619a      	str	r2, [r3, #24]
 8000482:	4b3f      	ldr	r3, [pc, #252]	; (8000580 <HAL_SPI_MspInit+0x130>)
 8000484:	699a      	ldr	r2, [r3, #24]
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	015b      	lsls	r3, r3, #5
 800048a:	4013      	ands	r3, r2
 800048c:	613b      	str	r3, [r7, #16]
 800048e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b3b      	ldr	r3, [pc, #236]	; (8000580 <HAL_SPI_MspInit+0x130>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	4b3a      	ldr	r3, [pc, #232]	; (8000580 <HAL_SPI_MspInit+0x130>)
 8000496:	2180      	movs	r1, #128	; 0x80
 8000498:	0289      	lsls	r1, r1, #10
 800049a:	430a      	orrs	r2, r1
 800049c:	615a      	str	r2, [r3, #20]
 800049e:	4b38      	ldr	r3, [pc, #224]	; (8000580 <HAL_SPI_MspInit+0x130>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	029b      	lsls	r3, r3, #10
 80004a6:	4013      	ands	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004ac:	0021      	movs	r1, r4
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	22e0      	movs	r2, #224	; 0xe0
 80004b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2202      	movs	r2, #2
 80004b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2203      	movs	r2, #3
 80004c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	187a      	adds	r2, r7, r1
 80004ce:	2390      	movs	r3, #144	; 0x90
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fbb5 	bl	8000c44 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80004da:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <HAL_SPI_MspInit+0x134>)
 80004dc:	4a2a      	ldr	r2, [pc, #168]	; (8000588 <HAL_SPI_MspInit+0x138>)
 80004de:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004e0:	4b28      	ldr	r3, [pc, #160]	; (8000584 <HAL_SPI_MspInit+0x134>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004e6:	4b27      	ldr	r3, [pc, #156]	; (8000584 <HAL_SPI_MspInit+0x134>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004ec:	4b25      	ldr	r3, [pc, #148]	; (8000584 <HAL_SPI_MspInit+0x134>)
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004f2:	4b24      	ldr	r3, [pc, #144]	; (8000584 <HAL_SPI_MspInit+0x134>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004f8:	4b22      	ldr	r3, [pc, #136]	; (8000584 <HAL_SPI_MspInit+0x134>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <HAL_SPI_MspInit+0x134>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <HAL_SPI_MspInit+0x134>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <HAL_SPI_MspInit+0x134>)
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fa01 	bl	8000914 <HAL_DMA_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000516:	f7ff ff71 	bl	80003fc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a19      	ldr	r2, [pc, #100]	; (8000584 <HAL_SPI_MspInit+0x134>)
 800051e:	659a      	str	r2, [r3, #88]	; 0x58
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <HAL_SPI_MspInit+0x134>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <HAL_SPI_MspInit+0x13c>)
 8000528:	4a19      	ldr	r2, [pc, #100]	; (8000590 <HAL_SPI_MspInit+0x140>)
 800052a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <HAL_SPI_MspInit+0x13c>)
 800052e:	2210      	movs	r2, #16
 8000530:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000532:	4b16      	ldr	r3, [pc, #88]	; (800058c <HAL_SPI_MspInit+0x13c>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_SPI_MspInit+0x13c>)
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <HAL_SPI_MspInit+0x13c>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_SPI_MspInit+0x13c>)
 8000546:	2200      	movs	r2, #0
 8000548:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <HAL_SPI_MspInit+0x13c>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_SPI_MspInit+0x13c>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <HAL_SPI_MspInit+0x13c>)
 8000558:	0018      	movs	r0, r3
 800055a:	f000 f9db 	bl	8000914 <HAL_DMA_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 8000562:	f7ff ff4b 	bl	80003fc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a08      	ldr	r2, [pc, #32]	; (800058c <HAL_SPI_MspInit+0x13c>)
 800056a:	655a      	str	r2, [r3, #84]	; 0x54
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <HAL_SPI_MspInit+0x13c>)
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b00b      	add	sp, #44	; 0x2c
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40013000 	.word	0x40013000
 8000580:	40021000 	.word	0x40021000
 8000584:	200000a0 	.word	0x200000a0
 8000588:	4002001c 	.word	0x4002001c
 800058c:	200000e4 	.word	0x200000e4
 8000590:	40020030 	.word	0x40020030

08000594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <NMI_Handler+0x4>

0800059a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <HardFault_Handler+0x4>

080005a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 f88e 	bl	80006d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fa50 	bl	8000a70 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fa4c 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	200000a0 	.word	0x200000a0
 80005e4:	200000e4 	.word	0x200000e4

080005e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f7ff fff6 	bl	80005e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	; (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000622:	f001 fe07 	bl	8002234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff fe0b 	bl	8000240 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000638:	080022dc 	.word	0x080022dc
  ldr r2, =_sbss
 800063c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000640:	20000140 	.word	0x20000140

08000644 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_IRQHandler>
	...

08000648 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <HAL_Init+0x24>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_Init+0x24>)
 8000652:	2110      	movs	r1, #16
 8000654:	430a      	orrs	r2, r1
 8000656:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f809 	bl	8000670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800065e:	f7ff fed3 	bl	8000408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
}
 8000664:	0018      	movs	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	40022000 	.word	0x40022000

08000670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <HAL_InitTick+0x5c>)
 800067a:	681c      	ldr	r4, [r3, #0]
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_InitTick+0x60>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	0019      	movs	r1, r3
 8000682:	23fa      	movs	r3, #250	; 0xfa
 8000684:	0098      	lsls	r0, r3, #2
 8000686:	f7ff fd3f 	bl	8000108 <__udivsi3>
 800068a:	0003      	movs	r3, r0
 800068c:	0019      	movs	r1, r3
 800068e:	0020      	movs	r0, r4
 8000690:	f7ff fd3a 	bl	8000108 <__udivsi3>
 8000694:	0003      	movs	r3, r0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f92f 	bl	80008fa <HAL_SYSTICK_Config>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e00f      	b.n	80006c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d80b      	bhi.n	80006c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	2301      	movs	r3, #1
 80006ae:	425b      	negs	r3, r3
 80006b0:	2200      	movs	r2, #0
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 f8fc 	bl	80008b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_InitTick+0x64>)
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006be:	2300      	movs	r3, #0
 80006c0:	e000      	b.n	80006c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b003      	add	sp, #12
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	20000014 	.word	0x20000014
 80006d0:	2000001c 	.word	0x2000001c
 80006d4:	20000018 	.word	0x20000018

080006d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x1c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	001a      	movs	r2, r3
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x20>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	18d2      	adds	r2, r2, r3
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <HAL_IncTick+0x20>)
 80006ea:	601a      	str	r2, [r3, #0]
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	2000001c 	.word	0x2000001c
 80006f8:	2000013c 	.word	0x2000013c

080006fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	2000013c 	.word	0x2000013c

08000710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000718:	f7ff fff0 	bl	80006fc <HAL_GetTick>
 800071c:	0003      	movs	r3, r0
 800071e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	d005      	beq.n	8000736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_Delay+0x44>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	001a      	movs	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	189b      	adds	r3, r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	f7ff ffe0 	bl	80006fc <HAL_GetTick>
 800073c:	0002      	movs	r2, r0
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	429a      	cmp	r2, r3
 8000746:	d8f7      	bhi.n	8000738 <HAL_Delay+0x28>
  {
  }
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b004      	add	sp, #16
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	2000001c 	.word	0x2000001c

08000758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b7f      	cmp	r3, #127	; 0x7f
 800076a:	d809      	bhi.n	8000780 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	001a      	movs	r2, r3
 8000772:	231f      	movs	r3, #31
 8000774:	401a      	ands	r2, r3
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <__NVIC_EnableIRQ+0x30>)
 8000778:	2101      	movs	r1, #1
 800077a:	4091      	lsls	r1, r2
 800077c:	000a      	movs	r2, r1
 800077e:	601a      	str	r2, [r3, #0]
  }
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b002      	add	sp, #8
 8000786:	bd80      	pop	{r7, pc}
 8000788:	e000e100 	.word	0xe000e100

0800078c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	0002      	movs	r2, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b7f      	cmp	r3, #127	; 0x7f
 80007a0:	d828      	bhi.n	80007f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a2:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <__NVIC_SetPriority+0xd4>)
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	33c0      	adds	r3, #192	; 0xc0
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	589b      	ldr	r3, [r3, r2]
 80007b2:	1dfa      	adds	r2, r7, #7
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	0011      	movs	r1, r2
 80007b8:	2203      	movs	r2, #3
 80007ba:	400a      	ands	r2, r1
 80007bc:	00d2      	lsls	r2, r2, #3
 80007be:	21ff      	movs	r1, #255	; 0xff
 80007c0:	4091      	lsls	r1, r2
 80007c2:	000a      	movs	r2, r1
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	401a      	ands	r2, r3
 80007c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	019b      	lsls	r3, r3, #6
 80007ce:	22ff      	movs	r2, #255	; 0xff
 80007d0:	401a      	ands	r2, r3
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	0018      	movs	r0, r3
 80007d8:	2303      	movs	r3, #3
 80007da:	4003      	ands	r3, r0
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e0:	481f      	ldr	r0, [pc, #124]	; (8000860 <__NVIC_SetPriority+0xd4>)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	089b      	lsrs	r3, r3, #2
 80007ea:	430a      	orrs	r2, r1
 80007ec:	33c0      	adds	r3, #192	; 0xc0
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007f2:	e031      	b.n	8000858 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <__NVIC_SetPriority+0xd8>)
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	0019      	movs	r1, r3
 80007fc:	230f      	movs	r3, #15
 80007fe:	400b      	ands	r3, r1
 8000800:	3b08      	subs	r3, #8
 8000802:	089b      	lsrs	r3, r3, #2
 8000804:	3306      	adds	r3, #6
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	18d3      	adds	r3, r2, r3
 800080a:	3304      	adds	r3, #4
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	1dfa      	adds	r2, r7, #7
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	0011      	movs	r1, r2
 8000814:	2203      	movs	r2, #3
 8000816:	400a      	ands	r2, r1
 8000818:	00d2      	lsls	r2, r2, #3
 800081a:	21ff      	movs	r1, #255	; 0xff
 800081c:	4091      	lsls	r1, r2
 800081e:	000a      	movs	r2, r1
 8000820:	43d2      	mvns	r2, r2
 8000822:	401a      	ands	r2, r3
 8000824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	019b      	lsls	r3, r3, #6
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	401a      	ands	r2, r3
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	0018      	movs	r0, r3
 8000834:	2303      	movs	r3, #3
 8000836:	4003      	ands	r3, r0
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <__NVIC_SetPriority+0xd8>)
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	001c      	movs	r4, r3
 8000844:	230f      	movs	r3, #15
 8000846:	4023      	ands	r3, r4
 8000848:	3b08      	subs	r3, #8
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	430a      	orrs	r2, r1
 800084e:	3306      	adds	r3, #6
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	18c3      	adds	r3, r0, r3
 8000854:	3304      	adds	r3, #4
 8000856:	601a      	str	r2, [r3, #0]
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b003      	add	sp, #12
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	1e5a      	subs	r2, r3, #1
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	045b      	lsls	r3, r3, #17
 8000878:	429a      	cmp	r2, r3
 800087a:	d301      	bcc.n	8000880 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087c:	2301      	movs	r3, #1
 800087e:	e010      	b.n	80008a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <SysTick_Config+0x44>)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	3a01      	subs	r2, #1
 8000886:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000888:	2301      	movs	r3, #1
 800088a:	425b      	negs	r3, r3
 800088c:	2103      	movs	r1, #3
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff ff7c 	bl	800078c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <SysTick_Config+0x44>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <SysTick_Config+0x44>)
 800089c:	2207      	movs	r2, #7
 800089e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	0018      	movs	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	210f      	movs	r1, #15
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	1c02      	adds	r2, r0, #0
 80008c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff ff5d 	bl	800078c <__NVIC_SetPriority>
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b004      	add	sp, #16
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	0002      	movs	r2, r0
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff ff33 	bl	8000758 <__NVIC_EnableIRQ>
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff ffaf 	bl	8000868 <SysTick_Config>
 800090a:	0003      	movs	r3, r0
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b002      	add	sp, #8
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e036      	b.n	8000998 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2221      	movs	r2, #33	; 0x21
 800092e:	2102      	movs	r1, #2
 8000930:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <HAL_DMA_Init+0x8c>)
 800093e:	4013      	ands	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800094a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f946 	bl	8000c0c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2221      	movs	r2, #33	; 0x21
 800098a:	2101      	movs	r1, #1
 800098c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2220      	movs	r2, #32
 8000992:	2100      	movs	r1, #0
 8000994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000996:	2300      	movs	r3, #0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	ffffc00f 	.word	0xffffc00f

080009a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009b2:	2317      	movs	r3, #23
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2220      	movs	r2, #32
 80009be:	5c9b      	ldrb	r3, [r3, r2]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d101      	bne.n	80009c8 <HAL_DMA_Start_IT+0x24>
 80009c4:	2302      	movs	r3, #2
 80009c6:	e04f      	b.n	8000a68 <HAL_DMA_Start_IT+0xc4>
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2220      	movs	r2, #32
 80009cc:	2101      	movs	r1, #1
 80009ce:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2221      	movs	r2, #33	; 0x21
 80009d4:	5c9b      	ldrb	r3, [r3, r2]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d13a      	bne.n	8000a52 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2221      	movs	r2, #33	; 0x21
 80009e0:	2102      	movs	r1, #2
 80009e2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2200      	movs	r2, #0
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	438a      	bics	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	68b9      	ldr	r1, [r7, #8]
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f000 f8d7 	bl	8000bb4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	210e      	movs	r1, #14
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e00f      	b.n	8000a40 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	210a      	movs	r1, #10
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	438a      	bics	r2, r1
 8000a3e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e007      	b.n	8000a62 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2220      	movs	r2, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a5a:	2317      	movs	r3, #23
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	2202      	movs	r2, #2
 8000a60:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000a62:	2317      	movs	r3, #23
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	781b      	ldrb	r3, [r3, #0]
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b006      	add	sp, #24
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	d024      	beq.n	8000ae2 <HAL_DMA_IRQHandler+0x72>
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	d020      	beq.n	8000ae2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	d107      	bne.n	8000abc <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	438a      	bics	r2, r1
 8000aba:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	4091      	lsls	r1, r2
 8000ac8:	000a      	movs	r2, r1
 8000aca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d100      	bne.n	8000ad6 <HAL_DMA_IRQHandler+0x66>
 8000ad4:	e06a      	b.n	8000bac <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	0010      	movs	r0, r2
 8000ade:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000ae0:	e064      	b.n	8000bac <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	0013      	movs	r3, r2
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	4013      	ands	r3, r2
 8000af0:	d02b      	beq.n	8000b4a <HAL_DMA_IRQHandler+0xda>
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2202      	movs	r2, #2
 8000af6:	4013      	ands	r3, r2
 8000af8:	d027      	beq.n	8000b4a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2220      	movs	r2, #32
 8000b02:	4013      	ands	r3, r2
 8000b04:	d10b      	bne.n	8000b1e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	210a      	movs	r1, #10
 8000b12:	438a      	bics	r2, r1
 8000b14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2221      	movs	r2, #33	; 0x21
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b26:	2102      	movs	r1, #2
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2220      	movs	r2, #32
 8000b32:	2100      	movs	r1, #0
 8000b34:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d036      	beq.n	8000bac <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	0010      	movs	r0, r2
 8000b46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000b48:	e030      	b.n	8000bac <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	2208      	movs	r2, #8
 8000b50:	409a      	lsls	r2, r3
 8000b52:	0013      	movs	r3, r2
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4013      	ands	r3, r2
 8000b58:	d028      	beq.n	8000bac <HAL_DMA_IRQHandler+0x13c>
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	4013      	ands	r3, r2
 8000b60:	d024      	beq.n	8000bac <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	210e      	movs	r1, #14
 8000b6e:	438a      	bics	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	000a      	movs	r2, r1
 8000b80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2221      	movs	r2, #33	; 0x21
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2220      	movs	r2, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d005      	beq.n	8000bac <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	0010      	movs	r0, r2
 8000ba8:	4798      	blx	r3
    }
  }
}
 8000baa:	e7ff      	b.n	8000bac <HAL_DMA_IRQHandler+0x13c>
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b004      	add	sp, #16
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	d108      	bne.n	8000bf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000bf2:	e007      	b.n	8000c04 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	60da      	str	r2, [r3, #12]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b004      	add	sp, #16
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <DMA_CalcBaseAndBitshift+0x30>)
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	4463      	add	r3, ip
 8000c1e:	2114      	movs	r1, #20
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fa71 	bl	8000108 <__udivsi3>
 8000c26:	0003      	movs	r3, r0
 8000c28:	009a      	lsls	r2, r3, #2
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <DMA_CalcBaseAndBitshift+0x34>)
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	bffdfff8 	.word	0xbffdfff8
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e14f      	b.n	8000ef4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	000a      	movs	r2, r1
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d100      	bne.n	8000c6c <HAL_GPIO_Init+0x28>
 8000c6a:	e140      	b.n	8000eee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2203      	movs	r2, #3
 8000c72:	4013      	ands	r3, r2
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d005      	beq.n	8000c84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d130      	bne.n	8000ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	409a      	lsls	r2, r3
 8000c92:	0013      	movs	r3, r2
 8000c94:	43da      	mvns	r2, r3
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cba:	2201      	movs	r2, #1
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2203      	movs	r2, #3
 8000cec:	4013      	ands	r3, r2
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d017      	beq.n	8000d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2203      	movs	r2, #3
 8000d28:	4013      	ands	r3, r2
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d123      	bne.n	8000d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	08da      	lsrs	r2, r3, #3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3208      	adds	r2, #8
 8000d36:	0092      	lsls	r2, r2, #2
 8000d38:	58d3      	ldr	r3, [r2, r3]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	2207      	movs	r2, #7
 8000d40:	4013      	ands	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	691a      	ldr	r2, [r3, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2107      	movs	r1, #7
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	08da      	lsrs	r2, r3, #3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3208      	adds	r2, #8
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	6939      	ldr	r1, [r7, #16]
 8000d74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	43da      	mvns	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2203      	movs	r2, #3
 8000d94:	401a      	ands	r2, r3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	23c0      	movs	r3, #192	; 0xc0
 8000db0:	029b      	lsls	r3, r3, #10
 8000db2:	4013      	ands	r3, r2
 8000db4:	d100      	bne.n	8000db8 <HAL_GPIO_Init+0x174>
 8000db6:	e09a      	b.n	8000eee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db8:	4b54      	ldr	r3, [pc, #336]	; (8000f0c <HAL_GPIO_Init+0x2c8>)
 8000dba:	699a      	ldr	r2, [r3, #24]
 8000dbc:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <HAL_GPIO_Init+0x2c8>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	619a      	str	r2, [r3, #24]
 8000dc4:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <HAL_GPIO_Init+0x2c8>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4013      	ands	r3, r2
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd0:	4a4f      	ldr	r2, [pc, #316]	; (8000f10 <HAL_GPIO_Init+0x2cc>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	589b      	ldr	r3, [r3, r2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	409a      	lsls	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	43da      	mvns	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	2390      	movs	r3, #144	; 0x90
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x1e2>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a44      	ldr	r2, [pc, #272]	; (8000f14 <HAL_GPIO_Init+0x2d0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x1de>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a43      	ldr	r2, [pc, #268]	; (8000f18 <HAL_GPIO_Init+0x2d4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x1da>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a42      	ldr	r2, [pc, #264]	; (8000f1c <HAL_GPIO_Init+0x2d8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x1d6>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x1e4>
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	e004      	b.n	8000e28 <HAL_GPIO_Init+0x1e4>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_Init+0x1e4>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <HAL_GPIO_Init+0x1e4>
 8000e26:	2300      	movs	r3, #0
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	2103      	movs	r1, #3
 8000e2c:	400a      	ands	r2, r1
 8000e2e:	0092      	lsls	r2, r2, #2
 8000e30:	4093      	lsls	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e38:	4935      	ldr	r1, [pc, #212]	; (8000f10 <HAL_GPIO_Init+0x2cc>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3302      	adds	r3, #2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e46:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	035b      	lsls	r3, r3, #13
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	039b      	lsls	r3, r3, #14
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	025b      	lsls	r3, r3, #9
 8000edc:	4013      	ands	r3, r2
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	40da      	lsrs	r2, r3
 8000efc:	1e13      	subs	r3, r2, #0
 8000efe:	d000      	beq.n	8000f02 <HAL_GPIO_Init+0x2be>
 8000f00:	e6a8      	b.n	8000c54 <HAL_GPIO_Init+0x10>
  } 
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b006      	add	sp, #24
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000
 8000f14:	48000400 	.word	0x48000400
 8000f18:	48000800 	.word	0x48000800
 8000f1c:	48000c00 	.word	0x48000c00
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e301      	b.n	800153a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d100      	bne.n	8000f42 <HAL_RCC_OscConfig+0x1e>
 8000f40:	e08d      	b.n	800105e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f42:	4bc3      	ldr	r3, [pc, #780]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	220c      	movs	r2, #12
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d00e      	beq.n	8000f6c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f4e:	4bc0      	ldr	r3, [pc, #768]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	220c      	movs	r2, #12
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d116      	bne.n	8000f88 <HAL_RCC_OscConfig+0x64>
 8000f5a:	4bbd      	ldr	r3, [pc, #756]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	025b      	lsls	r3, r3, #9
 8000f62:	401a      	ands	r2, r3
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d10d      	bne.n	8000f88 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	4bb8      	ldr	r3, [pc, #736]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	029b      	lsls	r3, r3, #10
 8000f74:	4013      	ands	r3, r2
 8000f76:	d100      	bne.n	8000f7a <HAL_RCC_OscConfig+0x56>
 8000f78:	e070      	b.n	800105c <HAL_RCC_OscConfig+0x138>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d000      	beq.n	8000f84 <HAL_RCC_OscConfig+0x60>
 8000f82:	e06b      	b.n	800105c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e2d8      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d107      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x7c>
 8000f90:	4baf      	ldr	r3, [pc, #700]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4bae      	ldr	r3, [pc, #696]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0249      	lsls	r1, r1, #9
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e02f      	b.n	8001000 <HAL_RCC_OscConfig+0xdc>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10c      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x9e>
 8000fa8:	4ba9      	ldr	r3, [pc, #676]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4ba8      	ldr	r3, [pc, #672]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	49a9      	ldr	r1, [pc, #676]	; (8001254 <HAL_RCC_OscConfig+0x330>)
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	4ba6      	ldr	r3, [pc, #664]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4ba5      	ldr	r3, [pc, #660]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000fba:	49a7      	ldr	r1, [pc, #668]	; (8001258 <HAL_RCC_OscConfig+0x334>)
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e01e      	b.n	8001000 <HAL_RCC_OscConfig+0xdc>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d10e      	bne.n	8000fe8 <HAL_RCC_OscConfig+0xc4>
 8000fca:	4ba1      	ldr	r3, [pc, #644]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4ba0      	ldr	r3, [pc, #640]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	02c9      	lsls	r1, r1, #11
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	4b9d      	ldr	r3, [pc, #628]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b9c      	ldr	r3, [pc, #624]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	0249      	lsls	r1, r1, #9
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e00b      	b.n	8001000 <HAL_RCC_OscConfig+0xdc>
 8000fe8:	4b99      	ldr	r3, [pc, #612]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b98      	ldr	r3, [pc, #608]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000fee:	4999      	ldr	r1, [pc, #612]	; (8001254 <HAL_RCC_OscConfig+0x330>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	4b96      	ldr	r3, [pc, #600]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b95      	ldr	r3, [pc, #596]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8000ffa:	4997      	ldr	r1, [pc, #604]	; (8001258 <HAL_RCC_OscConfig+0x334>)
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d014      	beq.n	8001032 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fb78 	bl	80006fc <HAL_GetTick>
 800100c:	0003      	movs	r3, r0
 800100e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001012:	f7ff fb73 	bl	80006fc <HAL_GetTick>
 8001016:	0002      	movs	r2, r0
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b64      	cmp	r3, #100	; 0x64
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e28a      	b.n	800153a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001024:	4b8a      	ldr	r3, [pc, #552]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	029b      	lsls	r3, r3, #10
 800102c:	4013      	ands	r3, r2
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0xee>
 8001030:	e015      	b.n	800105e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fb63 	bl	80006fc <HAL_GetTick>
 8001036:	0003      	movs	r3, r0
 8001038:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fb5e 	bl	80006fc <HAL_GetTick>
 8001040:	0002      	movs	r2, r0
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e275      	b.n	800153a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	4b80      	ldr	r3, [pc, #512]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	029b      	lsls	r3, r3, #10
 8001056:	4013      	ands	r3, r2
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x118>
 800105a:	e000      	b.n	800105e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2202      	movs	r2, #2
 8001064:	4013      	ands	r3, r2
 8001066:	d100      	bne.n	800106a <HAL_RCC_OscConfig+0x146>
 8001068:	e069      	b.n	800113e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800106a:	4b79      	ldr	r3, [pc, #484]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	220c      	movs	r2, #12
 8001070:	4013      	ands	r3, r2
 8001072:	d00b      	beq.n	800108c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001074:	4b76      	ldr	r3, [pc, #472]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	220c      	movs	r2, #12
 800107a:	4013      	ands	r3, r2
 800107c:	2b08      	cmp	r3, #8
 800107e:	d11c      	bne.n	80010ba <HAL_RCC_OscConfig+0x196>
 8001080:	4b73      	ldr	r3, [pc, #460]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	025b      	lsls	r3, r3, #9
 8001088:	4013      	ands	r3, r2
 800108a:	d116      	bne.n	80010ba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108c:	4b70      	ldr	r3, [pc, #448]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2202      	movs	r2, #2
 8001092:	4013      	ands	r3, r2
 8001094:	d005      	beq.n	80010a2 <HAL_RCC_OscConfig+0x17e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e24b      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b6b      	ldr	r3, [pc, #428]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	22f8      	movs	r2, #248	; 0xf8
 80010a8:	4393      	bics	r3, r2
 80010aa:	0019      	movs	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	00da      	lsls	r2, r3, #3
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b8:	e041      	b.n	800113e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d024      	beq.n	800110c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c2:	4b63      	ldr	r3, [pc, #396]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4b62      	ldr	r3, [pc, #392]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	430a      	orrs	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fb15 	bl	80006fc <HAL_GetTick>
 80010d2:	0003      	movs	r3, r0
 80010d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff fb10 	bl	80006fc <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e227      	b.n	800153a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ea:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2202      	movs	r2, #2
 80010f0:	4013      	ands	r3, r2
 80010f2:	d0f1      	beq.n	80010d8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f4:	4b56      	ldr	r3, [pc, #344]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	22f8      	movs	r2, #248	; 0xf8
 80010fa:	4393      	bics	r3, r2
 80010fc:	0019      	movs	r1, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	00da      	lsls	r2, r3, #3
 8001104:	4b52      	ldr	r3, [pc, #328]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e018      	b.n	800113e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001112:	2101      	movs	r1, #1
 8001114:	438a      	bics	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff faf0 	bl	80006fc <HAL_GetTick>
 800111c:	0003      	movs	r3, r0
 800111e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff faeb 	bl	80006fc <HAL_GetTick>
 8001126:	0002      	movs	r2, r0
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e202      	b.n	800153a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001134:	4b46      	ldr	r3, [pc, #280]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2202      	movs	r2, #2
 800113a:	4013      	ands	r3, r2
 800113c:	d1f1      	bne.n	8001122 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2208      	movs	r2, #8
 8001144:	4013      	ands	r3, r2
 8001146:	d036      	beq.n	80011b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d019      	beq.n	8001184 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001154:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001156:	2101      	movs	r1, #1
 8001158:	430a      	orrs	r2, r1
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115c:	f7ff face 	bl	80006fc <HAL_GetTick>
 8001160:	0003      	movs	r3, r0
 8001162:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001166:	f7ff fac9 	bl	80006fc <HAL_GetTick>
 800116a:	0002      	movs	r2, r0
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e1e0      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	2202      	movs	r2, #2
 800117e:	4013      	ands	r3, r2
 8001180:	d0f1      	beq.n	8001166 <HAL_RCC_OscConfig+0x242>
 8001182:	e018      	b.n	80011b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 800118a:	2101      	movs	r1, #1
 800118c:	438a      	bics	r2, r1
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001190:	f7ff fab4 	bl	80006fc <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119a:	f7ff faaf 	bl	80006fc <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e1c6      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	2202      	movs	r2, #2
 80011b2:	4013      	ands	r3, r2
 80011b4:	d1f1      	bne.n	800119a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2204      	movs	r2, #4
 80011bc:	4013      	ands	r3, r2
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x29e>
 80011c0:	e0b4      	b.n	800132c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c2:	201f      	movs	r0, #31
 80011c4:	183b      	adds	r3, r7, r0
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	69da      	ldr	r2, [r3, #28]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	055b      	lsls	r3, r3, #21
 80011d2:	4013      	ands	r3, r2
 80011d4:	d110      	bne.n	80011f8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	69da      	ldr	r2, [r3, #28]
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	0549      	lsls	r1, r1, #21
 80011e0:	430a      	orrs	r2, r1
 80011e2:	61da      	str	r2, [r3, #28]
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	69da      	ldr	r2, [r3, #28]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	055b      	lsls	r3, r3, #21
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011f2:	183b      	adds	r3, r7, r0
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_RCC_OscConfig+0x338>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4013      	ands	r3, r2
 8001202:	d11a      	bne.n	800123a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_RCC_OscConfig+0x338>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_RCC_OscConfig+0x338>)
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	0049      	lsls	r1, r1, #1
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001212:	f7ff fa73 	bl	80006fc <HAL_GetTick>
 8001216:	0003      	movs	r3, r0
 8001218:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121c:	f7ff fa6e 	bl	80006fc <HAL_GetTick>
 8001220:	0002      	movs	r2, r0
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e185      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_RCC_OscConfig+0x338>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4013      	ands	r3, r2
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10e      	bne.n	8001260 <HAL_RCC_OscConfig+0x33c>
 8001242:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001244:	6a1a      	ldr	r2, [r3, #32]
 8001246:	4b02      	ldr	r3, [pc, #8]	; (8001250 <HAL_RCC_OscConfig+0x32c>)
 8001248:	2101      	movs	r1, #1
 800124a:	430a      	orrs	r2, r1
 800124c:	621a      	str	r2, [r3, #32]
 800124e:	e035      	b.n	80012bc <HAL_RCC_OscConfig+0x398>
 8001250:	40021000 	.word	0x40021000
 8001254:	fffeffff 	.word	0xfffeffff
 8001258:	fffbffff 	.word	0xfffbffff
 800125c:	40007000 	.word	0x40007000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0x35e>
 8001268:	4bb6      	ldr	r3, [pc, #728]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800126a:	6a1a      	ldr	r2, [r3, #32]
 800126c:	4bb5      	ldr	r3, [pc, #724]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800126e:	2101      	movs	r1, #1
 8001270:	438a      	bics	r2, r1
 8001272:	621a      	str	r2, [r3, #32]
 8001274:	4bb3      	ldr	r3, [pc, #716]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001276:	6a1a      	ldr	r2, [r3, #32]
 8001278:	4bb2      	ldr	r3, [pc, #712]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800127a:	2104      	movs	r1, #4
 800127c:	438a      	bics	r2, r1
 800127e:	621a      	str	r2, [r3, #32]
 8001280:	e01c      	b.n	80012bc <HAL_RCC_OscConfig+0x398>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x380>
 800128a:	4bae      	ldr	r3, [pc, #696]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800128c:	6a1a      	ldr	r2, [r3, #32]
 800128e:	4bad      	ldr	r3, [pc, #692]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001290:	2104      	movs	r1, #4
 8001292:	430a      	orrs	r2, r1
 8001294:	621a      	str	r2, [r3, #32]
 8001296:	4bab      	ldr	r3, [pc, #684]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001298:	6a1a      	ldr	r2, [r3, #32]
 800129a:	4baa      	ldr	r3, [pc, #680]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800129c:	2101      	movs	r1, #1
 800129e:	430a      	orrs	r2, r1
 80012a0:	621a      	str	r2, [r3, #32]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0x398>
 80012a4:	4ba7      	ldr	r3, [pc, #668]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	4ba6      	ldr	r3, [pc, #664]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	438a      	bics	r2, r1
 80012ae:	621a      	str	r2, [r3, #32]
 80012b0:	4ba4      	ldr	r3, [pc, #656]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80012b2:	6a1a      	ldr	r2, [r3, #32]
 80012b4:	4ba3      	ldr	r3, [pc, #652]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80012b6:	2104      	movs	r1, #4
 80012b8:	438a      	bics	r2, r1
 80012ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d014      	beq.n	80012ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fa1a 	bl	80006fc <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012cc:	e009      	b.n	80012e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff fa15 	bl	80006fc <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	4a9b      	ldr	r2, [pc, #620]	; (8001548 <HAL_RCC_OscConfig+0x624>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e12b      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e2:	4b98      	ldr	r3, [pc, #608]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	2202      	movs	r2, #2
 80012e8:	4013      	ands	r3, r2
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x3aa>
 80012ec:	e013      	b.n	8001316 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fa05 	bl	80006fc <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f6:	e009      	b.n	800130c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f8:	f7ff fa00 	bl	80006fc <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a91      	ldr	r2, [pc, #580]	; (8001548 <HAL_RCC_OscConfig+0x624>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e116      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	4b8d      	ldr	r3, [pc, #564]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	2202      	movs	r2, #2
 8001312:	4013      	ands	r3, r2
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001316:	231f      	movs	r3, #31
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001320:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	4b87      	ldr	r3, [pc, #540]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001326:	4989      	ldr	r1, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x628>)
 8001328:	400a      	ands	r2, r1
 800132a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2210      	movs	r2, #16
 8001332:	4013      	ands	r3, r2
 8001334:	d063      	beq.n	80013fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d12a      	bne.n	8001394 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800133e:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001342:	4b80      	ldr	r3, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001344:	2104      	movs	r1, #4
 8001346:	430a      	orrs	r2, r1
 8001348:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800134a:	4b7e      	ldr	r3, [pc, #504]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800134c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800134e:	4b7d      	ldr	r3, [pc, #500]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001350:	2101      	movs	r1, #1
 8001352:	430a      	orrs	r2, r1
 8001354:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff f9d1 	bl	80006fc <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001360:	f7ff f9cc 	bl	80006fc <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e0e3      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001372:	4b74      	ldr	r3, [pc, #464]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d0f1      	beq.n	8001360 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800137c:	4b71      	ldr	r3, [pc, #452]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800137e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001380:	22f8      	movs	r2, #248	; 0xf8
 8001382:	4393      	bics	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	00da      	lsls	r2, r3, #3
 800138c:	4b6d      	ldr	r3, [pc, #436]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800138e:	430a      	orrs	r2, r1
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
 8001392:	e034      	b.n	80013fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	3305      	adds	r3, #5
 800139a:	d111      	bne.n	80013c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800139c:	4b69      	ldr	r3, [pc, #420]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800139e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a0:	4b68      	ldr	r3, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80013a2:	2104      	movs	r1, #4
 80013a4:	438a      	bics	r2, r1
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013a8:	4b66      	ldr	r3, [pc, #408]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80013aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ac:	22f8      	movs	r2, #248	; 0xf8
 80013ae:	4393      	bics	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	00da      	lsls	r2, r3, #3
 80013b8:	4b62      	ldr	r3, [pc, #392]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80013ba:	430a      	orrs	r2, r1
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
 80013be:	e01e      	b.n	80013fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013c0:	4b60      	ldr	r3, [pc, #384]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80013c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c4:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80013c6:	2104      	movs	r1, #4
 80013c8:	430a      	orrs	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013cc:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80013ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d0:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	438a      	bics	r2, r1
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff f990 	bl	80006fc <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013e2:	f7ff f98b 	bl	80006fc <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0a2      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80013f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f8:	2202      	movs	r2, #2
 80013fa:	4013      	ands	r3, r2
 80013fc:	d1f1      	bne.n	80013e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d100      	bne.n	8001408 <HAL_RCC_OscConfig+0x4e4>
 8001406:	e097      	b.n	8001538 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001408:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	220c      	movs	r2, #12
 800140e:	4013      	ands	r3, r2
 8001410:	2b08      	cmp	r3, #8
 8001412:	d100      	bne.n	8001416 <HAL_RCC_OscConfig+0x4f2>
 8001414:	e06b      	b.n	80014ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d14c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	4b49      	ldr	r3, [pc, #292]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001424:	494a      	ldr	r1, [pc, #296]	; (8001550 <HAL_RCC_OscConfig+0x62c>)
 8001426:	400a      	ands	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff f967 	bl	80006fc <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff f962 	bl	80006fc <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e079      	b.n	800153a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	049b      	lsls	r3, r3, #18
 800144e:	4013      	ands	r3, r2
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	220f      	movs	r2, #15
 8001458:	4393      	bics	r3, r2
 800145a:	0019      	movs	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001460:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001462:	430a      	orrs	r2, r1
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c
 8001466:	4b37      	ldr	r3, [pc, #220]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a3a      	ldr	r2, [pc, #232]	; (8001554 <HAL_RCC_OscConfig+0x630>)
 800146c:	4013      	ands	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	431a      	orrs	r2, r3
 800147a:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001480:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	0449      	lsls	r1, r1, #17
 800148a:	430a      	orrs	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff f935 	bl	80006fc <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff f930 	bl	80006fc <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e047      	b.n	800153a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	049b      	lsls	r3, r3, #18
 80014b2:	4013      	ands	r3, r2
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x574>
 80014b6:	e03f      	b.n	8001538 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80014be:	4924      	ldr	r1, [pc, #144]	; (8001550 <HAL_RCC_OscConfig+0x62c>)
 80014c0:	400a      	ands	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff f91a 	bl	80006fc <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff f915 	bl	80006fc <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e02c      	b.n	800153a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	049b      	lsls	r3, r3, #18
 80014e8:	4013      	ands	r3, r2
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x5aa>
 80014ec:	e024      	b.n	8001538 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e01f      	b.n	800153a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_RCC_OscConfig+0x620>)
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	025b      	lsls	r3, r3, #9
 800150c:	401a      	ands	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	429a      	cmp	r2, r3
 8001514:	d10e      	bne.n	8001534 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	220f      	movs	r2, #15
 800151a:	401a      	ands	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d107      	bne.n	8001534 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	23f0      	movs	r3, #240	; 0xf0
 8001528:	039b      	lsls	r3, r3, #14
 800152a:	401a      	ands	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b008      	add	sp, #32
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40021000 	.word	0x40021000
 8001548:	00001388 	.word	0x00001388
 800154c:	efffffff 	.word	0xefffffff
 8001550:	feffffff 	.word	0xfeffffff
 8001554:	ffc2ffff 	.word	0xffc2ffff

08001558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0b3      	b.n	80016d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_RCC_ClockConfig+0x184>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d911      	bls.n	800159e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b58      	ldr	r3, [pc, #352]	; (80016dc <HAL_RCC_ClockConfig+0x184>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2201      	movs	r2, #1
 8001580:	4393      	bics	r3, r2
 8001582:	0019      	movs	r1, r3
 8001584:	4b55      	ldr	r3, [pc, #340]	; (80016dc <HAL_RCC_ClockConfig+0x184>)
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158c:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_RCC_ClockConfig+0x184>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	4013      	ands	r3, r2
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d001      	beq.n	800159e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e09a      	b.n	80016d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d015      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2204      	movs	r2, #4
 80015ae:	4013      	ands	r3, r2
 80015b0:	d006      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015b2:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 80015b8:	21e0      	movs	r1, #224	; 0xe0
 80015ba:	00c9      	lsls	r1, r1, #3
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c0:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	22f0      	movs	r2, #240	; 0xf0
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	4b44      	ldr	r3, [pc, #272]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	d040      	beq.n	8001660 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	029b      	lsls	r3, r3, #10
 80015ee:	4013      	ands	r3, r2
 80015f0:	d114      	bne.n	800161c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e06e      	b.n	80016d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	049b      	lsls	r3, r3, #18
 8001606:	4013      	ands	r3, r2
 8001608:	d108      	bne.n	800161c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e062      	b.n	80016d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e05b      	b.n	80016d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2203      	movs	r2, #3
 8001622:	4393      	bics	r3, r2
 8001624:	0019      	movs	r1, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 800162c:	430a      	orrs	r2, r1
 800162e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001630:	f7ff f864 	bl	80006fc <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001638:	e009      	b.n	800164e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163a:	f7ff f85f 	bl	80006fc <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_RCC_ClockConfig+0x18c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e042      	b.n	80016d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	220c      	movs	r2, #12
 8001654:	401a      	ands	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	429a      	cmp	r2, r3
 800165e:	d1ec      	bne.n	800163a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_RCC_ClockConfig+0x184>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2201      	movs	r2, #1
 8001666:	4013      	ands	r3, r2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d211      	bcs.n	8001692 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_ClockConfig+0x184>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2201      	movs	r2, #1
 8001674:	4393      	bics	r3, r2
 8001676:	0019      	movs	r1, r3
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_RCC_ClockConfig+0x184>)
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_RCC_ClockConfig+0x184>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2201      	movs	r2, #1
 8001686:	4013      	ands	r3, r2
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e020      	b.n	80016d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2204      	movs	r2, #4
 8001698:	4013      	ands	r3, r2
 800169a:	d009      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_RCC_ClockConfig+0x190>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016b0:	f000 f820 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 80016b4:	0001      	movs	r1, r0
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_ClockConfig+0x188>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	220f      	movs	r2, #15
 80016be:	4013      	ands	r3, r2
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_RCC_ClockConfig+0x194>)
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	000a      	movs	r2, r1
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x198>)
 80016ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f7fe ffcf 	bl	8000670 <HAL_InitTick>
  
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b004      	add	sp, #16
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40022000 	.word	0x40022000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	00001388 	.word	0x00001388
 80016e8:	fffff8ff 	.word	0xfffff8ff
 80016ec:	080022a4 	.word	0x080022a4
 80016f0:	20000014 	.word	0x20000014

080016f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	220c      	movs	r2, #12
 8001718:	4013      	ands	r3, r2
 800171a:	2b04      	cmp	r3, #4
 800171c:	d002      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x30>
 800171e:	2b08      	cmp	r3, #8
 8001720:	d003      	beq.n	800172a <HAL_RCC_GetSysClockFreq+0x36>
 8001722:	e02c      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001726:	613b      	str	r3, [r7, #16]
      break;
 8001728:	e02c      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	0c9b      	lsrs	r3, r3, #18
 800172e:	220f      	movs	r2, #15
 8001730:	4013      	ands	r3, r2
 8001732:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_RCC_GetSysClockFreq+0x9c>)
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	220f      	movs	r2, #15
 800173e:	4013      	ands	r3, r2
 8001740:	4a16      	ldr	r2, [pc, #88]	; (800179c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	025b      	lsls	r3, r3, #9
 800174c:	4013      	ands	r3, r2
 800174e:	d009      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	4810      	ldr	r0, [pc, #64]	; (8001794 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001754:	f7fe fcd8 	bl	8000108 <__udivsi3>
 8001758:	0003      	movs	r3, r0
 800175a:	001a      	movs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4353      	muls	r3, r2
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e009      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	000a      	movs	r2, r1
 8001768:	0152      	lsls	r2, r2, #5
 800176a:	1a52      	subs	r2, r2, r1
 800176c:	0193      	lsls	r3, r2, #6
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	185b      	adds	r3, r3, r1
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
      break;
 800177c:	e002      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001780:	613b      	str	r3, [r7, #16]
      break;
 8001782:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001784:	693b      	ldr	r3, [r7, #16]
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b006      	add	sp, #24
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	40021000 	.word	0x40021000
 8001794:	007a1200 	.word	0x007a1200
 8001798:	080022b4 	.word	0x080022b4
 800179c:	080022c4 	.word	0x080022c4

080017a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0a8      	b.n	8001904 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	2382      	movs	r3, #130	; 0x82
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d009      	beq.n	80017da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
 80017cc:	e005      	b.n	80017da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	225d      	movs	r2, #93	; 0x5d
 80017e4:	5c9b      	ldrb	r3, [r3, r2]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	225c      	movs	r2, #92	; 0x5c
 80017f0:	2100      	movs	r1, #0
 80017f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7fe fe2a 	bl	8000450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	225d      	movs	r2, #93	; 0x5d
 8001800:	2102      	movs	r1, #2
 8001802:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	438a      	bics	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	23e0      	movs	r3, #224	; 0xe0
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	429a      	cmp	r2, r3
 800181e:	d902      	bls.n	8001826 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e002      	b.n	800182c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	015b      	lsls	r3, r3, #5
 800182a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	23f0      	movs	r3, #240	; 0xf0
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	429a      	cmp	r2, r3
 8001836:	d008      	beq.n	800184a <HAL_SPI_Init+0xaa>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	23e0      	movs	r3, #224	; 0xe0
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	429a      	cmp	r2, r3
 8001842:	d002      	beq.n	800184a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	2382      	movs	r3, #130	; 0x82
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6899      	ldr	r1, [r3, #8]
 8001858:	2384      	movs	r3, #132	; 0x84
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	400b      	ands	r3, r1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2102      	movs	r1, #2
 8001866:	400b      	ands	r3, r1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2101      	movs	r1, #1
 8001870:	400b      	ands	r3, r1
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6999      	ldr	r1, [r3, #24]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	400b      	ands	r3, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2138      	movs	r1, #56	; 0x38
 8001886:	400b      	ands	r3, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	400b      	ands	r3, r1
 8001892:	431a      	orrs	r2, r3
 8001894:	0011      	movs	r1, r2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	401a      	ands	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	2204      	movs	r2, #4
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2110      	movs	r1, #16
 80018b8:	400b      	ands	r3, r1
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c0:	2108      	movs	r1, #8
 80018c2:	400b      	ands	r3, r1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	23f0      	movs	r3, #240	; 0xf0
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	400b      	ands	r3, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	0011      	movs	r1, r2
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4907      	ldr	r1, [pc, #28]	; (800190c <HAL_SPI_Init+0x16c>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	225d      	movs	r2, #93	; 0x5d
 80018fe:	2101      	movs	r1, #1
 8001900:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b004      	add	sp, #16
 800190a:	bd80      	pop	{r7, pc}
 800190c:	fffff7ff 	.word	0xfffff7ff

08001910 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	001a      	movs	r2, r3
 800191e:	1cbb      	adds	r3, r7, #2
 8001920:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001922:	2317      	movs	r3, #23
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	225c      	movs	r2, #92	; 0x5c
 800192e:	5c9b      	ldrb	r3, [r3, r2]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_SPI_TransmitReceive_DMA+0x28>
 8001934:	2302      	movs	r3, #2
 8001936:	e190      	b.n	8001c5a <HAL_SPI_TransmitReceive_DMA+0x34a>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	225c      	movs	r2, #92	; 0x5c
 800193c:	2101      	movs	r1, #1
 800193e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001940:	2016      	movs	r0, #22
 8001942:	183b      	adds	r3, r7, r0
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	215d      	movs	r1, #93	; 0x5d
 8001948:	5c52      	ldrb	r2, [r2, r1]
 800194a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001952:	0001      	movs	r1, r0
 8001954:	187b      	adds	r3, r7, r1
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d011      	beq.n	8001980 <HAL_SPI_TransmitReceive_DMA+0x70>
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	2382      	movs	r3, #130	; 0x82
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	429a      	cmp	r2, r3
 8001964:	d107      	bne.n	8001976 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d103      	bne.n	8001976 <HAL_SPI_TransmitReceive_DMA+0x66>
 800196e:	187b      	adds	r3, r7, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b04      	cmp	r3, #4
 8001974:	d004      	beq.n	8001980 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8001976:	2317      	movs	r3, #23
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	2202      	movs	r2, #2
 800197c:	701a      	strb	r2, [r3, #0]
    goto error;
 800197e:	e165      	b.n	8001c4c <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_SPI_TransmitReceive_DMA+0x84>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_SPI_TransmitReceive_DMA+0x84>
 800198c:	1cbb      	adds	r3, r7, #2
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d104      	bne.n	800199e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8001994:	2317      	movs	r3, #23
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
    goto error;
 800199c:	e156      	b.n	8001c4c <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	225d      	movs	r2, #93	; 0x5d
 80019a2:	5c9b      	ldrb	r3, [r3, r2]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d003      	beq.n	80019b2 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	225d      	movs	r2, #93	; 0x5d
 80019ae:	2105      	movs	r1, #5
 80019b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1cba      	adds	r2, r7, #2
 80019c2:	8812      	ldrh	r2, [r2, #0]
 80019c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1cba      	adds	r2, r7, #2
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1cba      	adds	r2, r7, #2
 80019d8:	2144      	movs	r1, #68	; 0x44
 80019da:	8812      	ldrh	r2, [r2, #0]
 80019dc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1cba      	adds	r2, r7, #2
 80019e2:	2146      	movs	r1, #70	; 0x46
 80019e4:	8812      	ldrh	r2, [r2, #0]
 80019e6:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
#endif /* USE_SPI_CRC */

#if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F051x8) || defined (STM32F058xx)
  /* Packing mode management is enabled by the DMA settings */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	23e0      	movs	r3, #224	; 0xe0
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d80b      	bhi.n	8001a18 <HAL_SPI_TransmitReceive_DMA+0x108>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d104      	bne.n	8001a18 <HAL_SPI_TransmitReceive_DMA+0x108>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8001a0e:	2317      	movs	r3, #23
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a16:	e119      	b.n	8001c4c <HAL_SPI_TransmitReceive_DMA+0x33c>
  }
#endif /* STM32F030x6 || STM32F030x8 || STM32F031x6 || STM32F038xx || STM32F051x8 || STM32F058xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4990      	ldr	r1, [pc, #576]	; (8001c64 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	23e0      	movs	r3, #224	; 0xe0
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d908      	bls.n	8001a46 <HAL_SPI_TransmitReceive_DMA+0x136>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	498a      	ldr	r1, [pc, #552]	; (8001c68 <HAL_SPI_TransmitReceive_DMA+0x358>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	e074      	b.n	8001b30 <HAL_SPI_TransmitReceive_DMA+0x220>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0149      	lsls	r1, r1, #5
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d127      	bne.n	8001ab6 <HAL_SPI_TransmitReceive_DMA+0x1a6>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d10f      	bne.n	8001a92 <HAL_SPI_TransmitReceive_DMA+0x182>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	497b      	ldr	r1, [pc, #492]	; (8001c6c <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8001a7e:	400a      	ands	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a90:	e011      	b.n	8001ab6 <HAL_SPI_TransmitReceive_DMA+0x1a6>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	01c9      	lsls	r1, r1, #7
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d135      	bne.n	8001b30 <HAL_SPI_TransmitReceive_DMA+0x220>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4966      	ldr	r1, [pc, #408]	; (8001c68 <HAL_SPI_TransmitReceive_DMA+0x358>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2246      	movs	r2, #70	; 0x46
 8001ad8:	5a9b      	ldrh	r3, [r3, r2]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	001a      	movs	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d111      	bne.n	8001b08 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4960      	ldr	r1, [pc, #384]	; (8001c70 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2246      	movs	r2, #70	; 0x46
 8001af8:	5a9b      	ldrh	r3, [r3, r2]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	b299      	uxth	r1, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2246      	movs	r2, #70	; 0x46
 8001b04:	5299      	strh	r1, [r3, r2]
 8001b06:	e013      	b.n	8001b30 <HAL_SPI_TransmitReceive_DMA+0x220>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	0189      	lsls	r1, r1, #6
 8001b16:	430a      	orrs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2246      	movs	r2, #70	; 0x46
 8001b1e:	5a9b      	ldrh	r3, [r3, r2]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b299      	uxth	r1, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2246      	movs	r2, #70	; 0x46
 8001b2e:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	225d      	movs	r2, #93	; 0x5d
 8001b34:	5c9b      	ldrb	r3, [r3, r2]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d108      	bne.n	8001b4e <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	4a4c      	ldr	r2, [pc, #304]	; (8001c74 <HAL_SPI_TransmitReceive_DMA+0x364>)
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b4c:	e007      	b.n	8001b5e <HAL_SPI_TransmitReceive_DMA+0x24e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	4a4a      	ldr	r2, [pc, #296]	; (8001c7c <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	4a49      	ldr	r2, [pc, #292]	; (8001c80 <HAL_SPI_TransmitReceive_DMA+0x370>)
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4a48      	ldr	r2, [pc, #288]	; (8001c84 <HAL_SPI_TransmitReceive_DMA+0x374>)
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	330c      	adds	r3, #12
 8001b78:	0019      	movs	r1, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2246      	movs	r2, #70	; 0x46
 8001b84:	5a9b      	ldrh	r3, [r3, r2]
 8001b86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001b88:	0022      	movs	r2, r4
 8001b8a:	f7fe ff0b 	bl	80009a4 <HAL_DMA_Start_IT>
 8001b8e:	1e03      	subs	r3, r0, #0
 8001b90:	d00a      	beq.n	8001ba8 <HAL_SPI_TransmitReceive_DMA+0x298>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	2210      	movs	r2, #16
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8001b9e:	2317      	movs	r3, #23
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]

    goto error;
 8001ba6:	e051      	b.n	8001c4c <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	0019      	movs	r1, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	330c      	adds	r3, #12
 8001be8:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001bf0:	f7fe fed8 	bl	80009a4 <HAL_DMA_Start_IT>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d00a      	beq.n	8001c0e <HAL_SPI_TransmitReceive_DMA+0x2fe>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8001c04:	2317      	movs	r3, #23
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]

    goto error;
 8001c0c:	e01e      	b.n	8001c4c <HAL_SPI_TransmitReceive_DMA+0x33c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2240      	movs	r2, #64	; 0x40
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d007      	beq.n	8001c2c <HAL_SPI_TransmitReceive_DMA+0x31c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2140      	movs	r1, #64	; 0x40
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2120      	movs	r1, #32
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2102      	movs	r1, #2
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	225c      	movs	r2, #92	; 0x5c
 8001c50:	2100      	movs	r1, #0
 8001c52:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001c54:	2317      	movs	r3, #23
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	781b      	ldrb	r3, [r3, #0]
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b007      	add	sp, #28
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	ffff9fff 	.word	0xffff9fff
 8001c68:	ffffefff 	.word	0xffffefff
 8001c6c:	ffffbfff 	.word	0xffffbfff
 8001c70:	ffffdfff 	.word	0xffffdfff
 8001c74:	08001e0f 	.word	0x08001e0f
 8001c78:	08001cc9 	.word	0x08001cc9
 8001c7c:	08001e2d 	.word	0x08001e2d
 8001c80:	08001d79 	.word	0x08001d79
 8001c84:	08001e4b 	.word	0x08001e4b

08001c88 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cd6:	f7fe fd11 	bl	80006fc <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d03e      	beq.n	8001d6a <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10e      	bne.n	8001d22 <SPI_DMAReceiveCplt+0x5a>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	2382      	movs	r3, #130	; 0x82
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d108      	bne.n	8001d22 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	e007      	b.n	8001d32 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	438a      	bics	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2164      	movs	r1, #100	; 0x64
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f000 f9d7 	bl	80020ec <SPI_EndRxTransaction>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d002      	beq.n	8001d48 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2246      	movs	r2, #70	; 0x46
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	225d      	movs	r2, #93	; 0x5d
 8001d54:	2101      	movs	r1, #1
 8001d56:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7ff ffa8 	bl	8001cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8001d68:	e003      	b.n	8001d72 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff ff8b 	bl	8001c88 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b004      	add	sp, #16
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d86:	f7fe fcb9 	bl	80006fc <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2220      	movs	r2, #32
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d031      	beq.n	8001e00 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2120      	movs	r1, #32
 8001da8:	438a      	bics	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2164      	movs	r1, #100	; 0x64
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 f9f8 	bl	80021a8 <SPI_EndRxTxTransaction>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d005      	beq.n	8001dc8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2246      	movs	r2, #70	; 0x46
 8001de2:	2100      	movs	r1, #0
 8001de4:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	225d      	movs	r2, #93	; 0x5d
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8001dfe:	e003      	b.n	8001e08 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f7fe fa0c 	bl	8000220 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b004      	add	sp, #16
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff ff3a 	bl	8001c98 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ff33 	bl	8001ca8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2103      	movs	r1, #3
 8001e64:	438a      	bics	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	225d      	movs	r2, #93	; 0x5d
 8001e78:	2101      	movs	r1, #1
 8001e7a:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff ff1a 	bl	8001cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b004      	add	sp, #16
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	1dfb      	adds	r3, r7, #7
 8001e9a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e9c:	f7fe fc2e 	bl	80006fc <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	18d3      	adds	r3, r2, r3
 8001eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001eac:	f7fe fc26 	bl	80006fc <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	015b      	lsls	r3, r3, #5
 8001eba:	0d1b      	lsrs	r3, r3, #20
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	4353      	muls	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ec2:	e058      	b.n	8001f76 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	d055      	beq.n	8001f76 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001eca:	f7fe fc17 	bl	80006fc <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d902      	bls.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d142      	bne.n	8001f66 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	21e0      	movs	r1, #224	; 0xe0
 8001eec:	438a      	bics	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	2382      	movs	r3, #130	; 0x82
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d113      	bne.n	8001f24 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d005      	beq.n	8001f14 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d107      	bne.n	8001f24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2140      	movs	r1, #64	; 0x40
 8001f20:	438a      	bics	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	019b      	lsls	r3, r3, #6
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d110      	bne.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	491a      	ldr	r1, [pc, #104]	; (8001fa4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	0189      	lsls	r1, r1, #6
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	225d      	movs	r2, #93	; 0x5d
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	225c      	movs	r2, #92	; 0x5c
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e017      	b.n	8001f96 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	425a      	negs	r2, r3
 8001f86:	4153      	adcs	r3, r2
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	1dfb      	adds	r3, r7, #7
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d197      	bne.n	8001ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b008      	add	sp, #32
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	20000014 	.word	0x20000014
 8001fa4:	ffffdfff 	.word	0xffffdfff

08001fa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001fb6:	2317      	movs	r3, #23
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001fbe:	f7fe fb9d 	bl	80006fc <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	18d3      	adds	r3, r2, r3
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001fce:	f7fe fb95 	bl	80006fc <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	0013      	movs	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	00da      	lsls	r2, r3, #3
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	0d1b      	lsrs	r3, r3, #20
 8001fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff0:	4353      	muls	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001ff4:	e068      	b.n	80020c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	23c0      	movs	r3, #192	; 0xc0
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d10a      	bne.n	8002016 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	2117      	movs	r1, #23
 800200e:	187b      	adds	r3, r7, r1
 8002010:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002012:	187b      	adds	r3, r7, r1
 8002014:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	d055      	beq.n	80020c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800201c:	f7fe fb6e 	bl	80006fc <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002028:	429a      	cmp	r2, r3
 800202a:	d902      	bls.n	8002032 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	2b00      	cmp	r3, #0
 8002030:	d142      	bne.n	80020b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	21e0      	movs	r1, #224	; 0xe0
 800203e:	438a      	bics	r2, r1
 8002040:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	2382      	movs	r3, #130	; 0x82
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	429a      	cmp	r2, r3
 800204c:	d113      	bne.n	8002076 <SPI_WaitFifoStateUntilTimeout+0xce>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	429a      	cmp	r2, r3
 8002058:	d005      	beq.n	8002066 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	429a      	cmp	r2, r3
 8002064:	d107      	bne.n	8002076 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	438a      	bics	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	019b      	lsls	r3, r3, #6
 800207e:	429a      	cmp	r2, r3
 8002080:	d110      	bne.n	80020a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4916      	ldr	r1, [pc, #88]	; (80020e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800208e:	400a      	ands	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0189      	lsls	r1, r1, #6
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	225d      	movs	r2, #93	; 0x5d
 80020a8:	2101      	movs	r1, #1
 80020aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	225c      	movs	r2, #92	; 0x5c
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e010      	b.n	80020da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d18e      	bne.n	8001ff6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b00a      	add	sp, #40	; 0x28
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	20000014 	.word	0x20000014
 80020e8:	ffffdfff 	.word	0xffffdfff

080020ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	2382      	movs	r3, #130	; 0x82
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	429a      	cmp	r2, r3
 8002102:	d113      	bne.n	800212c <SPI_EndRxTransaction+0x40>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	429a      	cmp	r2, r3
 800210e:	d005      	beq.n	800211c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	429a      	cmp	r2, r3
 800211a:	d107      	bne.n	800212c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2140      	movs	r1, #64	; 0x40
 8002128:	438a      	bics	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	0013      	movs	r3, r2
 8002136:	2200      	movs	r2, #0
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	f7ff fea7 	bl	8001e8c <SPI_WaitFlagStateUntilTimeout>
 800213e:	1e03      	subs	r3, r0, #0
 8002140:	d007      	beq.n	8002152 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	2220      	movs	r2, #32
 8002148:	431a      	orrs	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e026      	b.n	80021a0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	2382      	movs	r3, #130	; 0x82
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	429a      	cmp	r2, r3
 800215c:	d11f      	bne.n	800219e <SPI_EndRxTransaction+0xb2>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	429a      	cmp	r2, r3
 8002168:	d005      	beq.n	8002176 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	429a      	cmp	r2, r3
 8002174:	d113      	bne.n	800219e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	00d9      	lsls	r1, r3, #3
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	0013      	movs	r3, r2
 8002184:	2200      	movs	r2, #0
 8002186:	f7ff ff0f 	bl	8001fa8 <SPI_WaitFifoStateUntilTimeout>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d007      	beq.n	800219e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002192:	2220      	movs	r2, #32
 8002194:	431a      	orrs	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e000      	b.n	80021a0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b004      	add	sp, #16
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	0159      	lsls	r1, r3, #5
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	0013      	movs	r3, r2
 80021c2:	2200      	movs	r2, #0
 80021c4:	f7ff fef0 	bl	8001fa8 <SPI_WaitFifoStateUntilTimeout>
 80021c8:	1e03      	subs	r3, r0, #0
 80021ca:	d007      	beq.n	80021dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d0:	2220      	movs	r2, #32
 80021d2:	431a      	orrs	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e027      	b.n	800222c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	0013      	movs	r3, r2
 80021e6:	2200      	movs	r2, #0
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	f7ff fe4f 	bl	8001e8c <SPI_WaitFlagStateUntilTimeout>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d007      	beq.n	8002202 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	2220      	movs	r2, #32
 80021f8:	431a      	orrs	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e014      	b.n	800222c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	23c0      	movs	r3, #192	; 0xc0
 8002206:	00d9      	lsls	r1, r3, #3
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	0013      	movs	r3, r2
 8002210:	2200      	movs	r2, #0
 8002212:	f7ff fec9 	bl	8001fa8 <SPI_WaitFifoStateUntilTimeout>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d007      	beq.n	800222a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221e:	2220      	movs	r2, #32
 8002220:	431a      	orrs	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e000      	b.n	800222c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b004      	add	sp, #16
 8002232:	bd80      	pop	{r7, pc}

08002234 <__libc_init_array>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	2600      	movs	r6, #0
 8002238:	4d0c      	ldr	r5, [pc, #48]	; (800226c <__libc_init_array+0x38>)
 800223a:	4c0d      	ldr	r4, [pc, #52]	; (8002270 <__libc_init_array+0x3c>)
 800223c:	1b64      	subs	r4, r4, r5
 800223e:	10a4      	asrs	r4, r4, #2
 8002240:	42a6      	cmp	r6, r4
 8002242:	d109      	bne.n	8002258 <__libc_init_array+0x24>
 8002244:	2600      	movs	r6, #0
 8002246:	f000 f821 	bl	800228c <_init>
 800224a:	4d0a      	ldr	r5, [pc, #40]	; (8002274 <__libc_init_array+0x40>)
 800224c:	4c0a      	ldr	r4, [pc, #40]	; (8002278 <__libc_init_array+0x44>)
 800224e:	1b64      	subs	r4, r4, r5
 8002250:	10a4      	asrs	r4, r4, #2
 8002252:	42a6      	cmp	r6, r4
 8002254:	d105      	bne.n	8002262 <__libc_init_array+0x2e>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	00b3      	lsls	r3, r6, #2
 800225a:	58eb      	ldr	r3, [r5, r3]
 800225c:	4798      	blx	r3
 800225e:	3601      	adds	r6, #1
 8002260:	e7ee      	b.n	8002240 <__libc_init_array+0xc>
 8002262:	00b3      	lsls	r3, r6, #2
 8002264:	58eb      	ldr	r3, [r5, r3]
 8002266:	4798      	blx	r3
 8002268:	3601      	adds	r6, #1
 800226a:	e7f2      	b.n	8002252 <__libc_init_array+0x1e>
 800226c:	080022d4 	.word	0x080022d4
 8002270:	080022d4 	.word	0x080022d4
 8002274:	080022d4 	.word	0x080022d4
 8002278:	080022d8 	.word	0x080022d8

0800227c <memset>:
 800227c:	0003      	movs	r3, r0
 800227e:	1882      	adds	r2, r0, r2
 8002280:	4293      	cmp	r3, r2
 8002282:	d100      	bne.n	8002286 <memset+0xa>
 8002284:	4770      	bx	lr
 8002286:	7019      	strb	r1, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	e7f9      	b.n	8002280 <memset+0x4>

0800228c <_init>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr

08002298 <_fini>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr
